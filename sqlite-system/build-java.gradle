apply plugin: 'cpp'
apply plugin: 'java'
apply plugin: 'maven'

repositories {
    jcenter()
}

version = System.getenv("MAVEN_UPLOAD_VERSION")

////////////////////////////////////////////
// For Native Library
////////////////////////////////////////////

model {
    platforms {
        osx_x86 {
            architecture "x86"
            operatingSystem "osx"
        }
        osx_x86_64 {
            architecture "x86_64"
            operatingSystem "osx"
        }
        linux_x86 {
            architecture "x86"
            operatingSystem "linux"
        }
        linux_x86_64 {
            architecture "x86_64"
            operatingSystem "linux"
        }
        linux_amd64 {
            architecture "amd64"
            operatingSystem "linux"
        }
        windows_x86 {
            architecture "x86"
            operatingSystem "windows"
        }
        windows_x86_64 {
            architecture "x86_64"
            operatingSystem "windows"
        }
        windows_amd64 {
            architecture "amd64"
            operatingSystem "windows"
        }
    }

    toolChains {
        visualCpp(VisualCpp)
        gcc(Gcc)
        clang(Clang)
    }

    repositories {
        libs(PrebuiltLibraries) {
            libsqlite3 {
                headers.srcDir "../vendor/sqlite/src/headers"
                binaries.withType(SharedLibraryBinary) {
                    def platformName = targetPlatform.name
                    def os = targetPlatform.operatingSystem;
                    def osName = os.name
                    def arch = targetPlatform.architecture.name.replaceAll("-", "_")
                    if (platformName == "windows_amd64" || platformName == "linux_amd64") {
                        arch = "amd64"
                    }
                    def libName = osName == 'windows' ? "sqlite3.lib" : (osName == 'osx' ? "libsqlite3.dylib" : "libsqlite3.so")
                    def libPath = ""
                    if (osName == "osx") {
                        // Using the universal library:
                        libPath = "../vendor/sqlite/libs/${osName}/${libName}"
                    } else {
                        libPath = "../vendor/sqlite/libs/${osName}/${arch}/${libName}"
                    }
                    sharedLibraryFile = file(libPath)
                }
            }
        }
    }

    components {
        CBLJavaNativeSQLiteSystem(NativeLibrarySpec) {
            targetPlatform "osx_x86"
            targetPlatform "osx_x86_64"
            targetPlatform "linux_x86"
            targetPlatform "linux_x86_64"
            targetPlatform "linux_amd64"
            targetPlatform "windows_x86"
            targetPlatform "windows_x86_64"
            targetPlatform "windows_amd64"
            sources {
                cpp {
                    source {
                        srcDir "../jni/source"
                        exclude "**/com_couchbase_lite_database_security_Key.cpp"
                    }
                    exportedHeaders {
                        srcDir "../jni/headers"
                    }
                    lib library: 'libsqlite3', linkage: 'shared'
                }
            }
            binaries.withType(StaticLibraryBinary) { binary ->
                buildable = false
            }
            binaries.all {
                if (targetPlatform.operatingSystem.macOsX) {
                    cppCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cppCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/darwin"
                    linker.args '-framework', "JavaVM"
                } else if (targetPlatform.operatingSystem.linux) {
                    cppCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cppCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/linux"
                } else if (targetPlatform.operatingSystem.windows) {
                    cppCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cppCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include/win32"
                }

                if (toolChain in Gcc) {
                    cppCompiler.args "-ffunction-sections", "-fdata-sections", "-fomit-frame-pointer"
                    linker.args "-Wl,--no-undefined"
                    linker.args "-lpthread", "-ldl"                 
                }
            }
        }
    }
}

jar.baseName = "couchbase-lite-java-native"

binaries.withType(SharedLibraryBinary) { binary ->
    if (!buildable) {
        return
    }

    def builderTask = binary.tasks
    def platformName = targetPlatform.name
    def os = targetPlatform.operatingSystem.name
    def arch = targetPlatform.architecture.name.replaceAll("-", "_")
    if (platformName == "windows_amd64" || platformName == "linux_amd64") {
        arch = "amd64"
    }
    jar.into("native/${os}/${arch}") {
        from builderTask.outputFile
    }

    jar.dependsOn builderTask
}

////////////////////////////////////////////
// For Java
////////////////////////////////////////////

sourceSets {
    test {
        java {
            srcDirs = ["src/androidTest/java"]
            include "**/*Test.java"
        }
    }
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.java.srcDirs
}

artifacts {
    archives sourcesJar
}

////////////////////////////////////////////
// For Maven
////////////////////////////////////////////

task createMavenDirectory(type: Exec) {
    ext {
        uploadUser = System.getenv("MAVEN_UPLOAD_USERNAME") + ":" + System.getenv("MAVEN_UPLOAD_PASSWORD")
        mkcolPath  = System.getenv("MAVEN_UPLOAD_REPO_URL") + "com/couchbase/lite/couchbase-lite-java-native-sqlite-system-desktop/" + version + "/"
    }
    commandLine "curl", "--user", uploadUser, "-X", "MKCOL", mkcolPath
}

// this hack is only needed for apache mod_dav based Maven repo's like file.couchbase.com.  otherwise, skip it
createMavenDirectory.onlyIf { System.getenv("MAVEN_UPLOAD_REPO_URL").contains("files") }

// first create the directory, then do the upload
task uploadArchivesWrapper(dependsOn: createMavenDirectory) << {
    uploadArchives.execute()
}

// this will upload, but will not first create a directory (which is needed on some servers)
uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: System.getenv("MAVEN_UPLOAD_REPO_URL")) {
                authentication(userName: System.getenv("MAVEN_UPLOAD_USERNAME"), password: System.getenv("MAVEN_UPLOAD_PASSWORD"))
            }
            pom.version = version
            pom.groupId = 'com.couchbase.lite'
            pom.artifactId = 'couchbase-lite-java-native-sqlite-system-desktop'
            pom.project {
                licenses {
                    license {
                        name 'Couchbase Community Edition License Agreement'
                        url 'http://www.couchbase.com/agreement/community'
                        distribution 'repo'
                    }
                }
            }
        }
    }
}
